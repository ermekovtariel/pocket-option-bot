import asyncio
import json
import aiosqlite
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = '8127281037:AAHIKWzlmNJlmMg4N6_sMLGDLPEtyHg0_aU'   # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL_USERNAME = "@etb_music"               # <-- —Ç–≤–æ–π –∫–∞–Ω–∞–ª
DB_NAME = "users.db"
support_user_url = "https://t.me/root_tora"

# –≠—Ç–æ –ù–ï postback-URL! –≠—Ç–æ —Ç—Ä–µ–∫–∏–Ω–≥/—Å–º–∞—Ä—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
tracking_url_template = "https://u3.shortink.io/smart/3BhXXPRtZ739nL?trader_id={trader_id}&promo={promo}"

# –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥/–º–µ—Ç–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ ‚Äî –ø–æ–º–µ–Ω—è–π —Ç—É—Ç.
DEFAULT_PROMO = "TG"

# –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤–∞—Ä—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
from languages import text_lang

# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê =========
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ========= –ë–ê–ó–ê –î–ê–ù–ù–´–• =========
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id     INTEGER PRIMARY KEY,
                language    TEXT DEFAULT 'ru',
                subscribed  INTEGER DEFAULT 0,
                registered  INTEGER DEFAULT 0,
                trader_id   TEXT
            )
        """)
        # –õ–æ–≥–∏ –ø–æ—Å—Ç–±–µ–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞—É–¥–∏—Ç–∞)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS postbacks (
                id          INTEGER PRIMARY KEY AUTOINCREMENT,
                trader_id   TEXT,
                promo       TEXT,
                status      TEXT,
                raw         TEXT,
                created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()

# ========= –•–ï–õ–ü–ï–†–´ =========
def t(lang: str, key: str) -> str:
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–ª–æ–≤–∞—Ä—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
    return text_lang.get(lang, {}).get(key, key)

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status != "left"
    except Exception:
        return False

async def is_registered(trader_id: str) -> bool:
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT 1 FROM users WHERE trader_id=? AND registered=1", (trader_id,)) as cur:
            row = await cur.fetchone()
            return bool(row)

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def language_inline():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("–ö—ã—Ä–≥—ã–∑",  callback_data="lang_kg"),
        InlineKeyboardButton("English", callback_data="lang_en"),
    )
    return kb

def subscribe_inline(lang):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(t(lang,"Subscribe to channel"), url=f"https://t.me/{CHANNEL_USERNAME[1:]}"),
        InlineKeyboardButton(t(lang,"Check subscription"), callback_data="check_sub"),
    )

def main_menu_inline(lang):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(t(lang,"Change Language"), callback_data="change_lang"),
        InlineKeyboardButton(t(lang,"Instruction"),    callback_data="instruction"),
    )
    kb.add(
        InlineKeyboardButton(t(lang,"Support"), url=support_user_url),
        InlineKeyboardButton(t(lang,"Signals"), callback_data="signals"),
    )
    return kb

def back_inline(lang):
    return InlineKeyboardMarkup().add(InlineKeyboardButton(t(lang,"Back"), callback_data="back"))

def signals_inline(lang):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(t(lang,"Register"),            callback_data="register"),
        InlineKeyboardButton(t(lang,"Check registration"),  callback_data="check_registration"),
        InlineKeyboardButton(t(lang,"Back"),                callback_data="back"),
    )

def support_inline(lang):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(t(lang,"Support"), url=support_user_url),
        InlineKeyboardButton(t(lang,"Back"),    callback_data="back"),
    )

# ========= –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê =========
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
        await db.commit()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑ / Choose language", reply_markup=language_inline())

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT language FROM users WHERE user_id=?", (user_id,)) as cur:
            row = await cur.fetchone()
            lang = row[0] if row else "ru"

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    if data.startswith("lang_"):
        lang_new = data.split("_", 1)[1]
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute("UPDATE users SET language=? WHERE user_id=?", (lang_new, user_id))
            await db.commit()

        if not await is_subscribed(user_id):
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=t(lang_new, "Please subscribe to the channel to continue"),
                reply_markup=subscribe_inline(lang_new),
            )
            return

        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=t(lang_new, "Main menu"),
            reply_markup=main_menu_inline(lang_new),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if data == "check_sub":
        if await is_subscribed(user_id):
            async with aiosqlite.connect(DB_NAME) as db:
                await db.execute("UPDATE users SET subscribed=1 WHERE user_id=?", (user_id,))
                await db.commit()
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=t(lang, "Thanks! You are subscribed ‚úÖ"),
                reply_markup=main_menu_inline(lang),
            )
        else:
            await bot.answer_callback_query(callback_query.id, text="–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üòï")
        return

    # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    if data == "change_lang":
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑ / Choose language",
            reply_markup=language_inline(),
        )
        return

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    if data == "instruction":
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=t(lang, "Instruction"),
            reply_markup=back_inline(lang),
        )
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if data == "support":
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=t(lang, "Support"),
            reply_markup=support_inline(lang),
        )
        return

    # –°–∏–≥–Ω–∞–ª—ã
    if data == "signals":
        txt = t(lang, "Register for signals:")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=txt,
            reply_markup=signals_inline(lang),
        )
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É —Å —Ç–≤–æ–∏–º trader_id
    if data == "register":
        trader_id = str(user_id)  # –µ—Å–ª–∏ —É —Å–µ—Ä–≤–∏—Å–∞ –µ—Å—Ç—å –°–í–û–ô ID ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–π –µ–≥–æ —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ user_id
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute("UPDATE users SET trader_id=? WHERE user_id=?", (trader_id, user_id))
            await db.commit()

        url = tracking_url_template.format(trader_id=trader_id, promo=DEFAULT_PROMO)
        txt = f"{t(lang,'For registration, please follow the link')}:\n{url}"
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=txt,
            reply_markup=back_inline(lang),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–º–æ—Ç—Ä–∏–º –ø–æ–ª–µ registered)
    if data == "check_registration":
        registered = await is_registered(str(user_id))
        msg = t(lang, "You are registered ‚úÖ") if registered else t(lang, "You are not registered ‚ùå")
        await bot.answer_callback_query(callback_query.id, text=msg, show_alert=True)
        return

    # –ù–∞–∑–∞–¥
    if data == "back":
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=t(lang, "Main menu"),
            reply_markup=main_menu_inline(lang),
        )
        return

# ========= HTTP-–°–ï–†–í–ï–† –î–õ–Ø –ü–†–ò–Å–ú–ê –ü–û–°–¢–ë–ï–ö–ê =========
async def handle_postback(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–±–µ–∫ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞.
    –û–∂–∏–¥–∞–µ–º —Ö–æ—Ç—è –±—ã trader_id (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å).
    –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ registered=1.
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query –∏ –∏–∑ —Ç–µ–ª–∞ (POST form/json)
        params = dict(request.rel_url.query)

        if request.can_read_body:
            ctype = request.headers.get("Content-Type", "")
            if "application/json" in ctype:
                body = await request.json()
                if isinstance(body, dict):
                    params.update({k: str(v) for k, v in body.items()})
            else:
                data = await request.post()
                params.update({k: str(v) for k, v in data.items()})

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å trader_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
        trader_id = (
            params.get("trader_id")
            or params.get("sub_id")
            or params.get("sub1")
            or params.get("uid")
            or params.get("user_id")
        )
        promo = params.get("promo")
        status = params.get("status") or params.get("event") or params.get("action")

        raw_json = json.dumps(params, ensure_ascii=False)

        if not trader_id:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–∂–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç–±–µ–∫, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–µ—Ä–≤–∏—Å
            async with aiosqlite.connect(DB_NAME) as db:
                await db.execute(
                    "INSERT INTO postbacks (trader_id, promo, status, raw) VALUES (?, ?, ?, ?)",
                    (None, promo, status, raw_json),
                )
                await db.commit()
            return web.Response(text="missing trader_id", status=400)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å—Ç–±–µ–∫
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute(
                "INSERT INTO postbacks (trader_id, promo, status, raw) VALUES (?, ?, ?, ?)",
                (trader_id, promo, status, raw_json),
            )
            # –°—Ç–∞–≤–∏–º registered=1 –ø—Ä–∏ –ª—é–±–æ–º –≤–∞–ª–∏–¥–Ω–æ–º –ø–æ—Å—Ç–±–µ–∫–µ —Å trader_id
            await db.execute(
                "UPDATE users SET registered=1 WHERE trader_id=?",
                (trader_id,),
            )
            await db.commit()

        # –ü–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–ì (–µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ Telegram ID)
        try:
            uid = int(trader_id)
            await bot.send_message(uid, t("ru", "You are registered ‚úÖ"))
        except Exception:
            # –ï—Å–ª–∏ trader_id ‚Äî –Ω–µ —Ç–µ–ª–µ–≥—Ä–∞–º–Ω—ã–π int (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–∏—Å–Ω—ã–π ID), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º
            pass

        return web.Response(text="OK")
    except Exception as e:
        return web.Response(text=f"error: {e}", status=500)

async def handle_health(request: web.Request):
    return web.Response(text="OK")

async def start_http_server():
    app = web.Application()
    app.add_routes([
        web.get("/postback", handle_postback),
        web.post("/postback", handle_postback),
        web.get("/health", handle_health),
    ])
    runner = web.AppRunner(app)
    await runner.setup()
    # –°–ª—É—à–∞–µ–º –Ω–∞ 0.0.0.0:8080 (–ø—Ä–æ–∫–∏–Ω—å –ø–æ—Ä—Ç/–ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ nginx)
    site = web.TCPSite(runner, host="0.0.0.0", port=8080)
    await site.start()
    # –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π
    while True:
        await asyncio.sleep(3600)

# ========= –ó–ê–ü–£–°–ö =========
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    # —Å—Ç–∞—Ä—Ç—É–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ—Å—Ç–±–µ–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º
    loop.create_task(start_http_server())
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
